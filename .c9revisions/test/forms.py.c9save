{"ts":1380565232734,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"from django.core.exceptions import (ValidationError, ObjectDoesNotExist)\nfrom models import (Test, Block)\nfrom django.forms import (ModelForm, PasswordInput, CharField, ModelChoiceField, Select)\nfrom django.forms.models import BaseInlineFormSet    \n#from ckeditor.widgets import CKEditorWidget\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.contrib.flatpages.admin import FlatpageForm\n\nclass IndexLoginForm(ModelForm):\n    \n    password = CharField(\n        widget=PasswordInput(\n            attrs = {\n                'placeholder': 'Password',\n                'id': 'password',\n                'class': 'form-control',\n            }), \n        label=''\n    )\n\n    test = ModelChoiceField(\n        widget = Select(\n            attrs = {\n            'id': 'test',\n            'class': 'form-control',\n        }),\n        queryset = Test.objects.filter(is_active=True, block__isnull=False),\n        empty_label = \"Select a test...\",\n        label = '',\n    )\n\n    class Meta:\n        model = Test\n        fields = ('test', 'password')\n        \n    def clean_password(self):\n        test_id = self.cleaned_data['test'].id\n        password = self.cleaned_data['password']\n        if not Test.objects.filter(id=test_id, password=password).count():\n            raise ValidationError(\"Invalid password\")\n        return password\n\nclass EntranceLoginForm(ModelForm):\n    \n    password = CharField(\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Password',\n                'id': 'password',\n                'class': 'form-control',\n            }), \n        label=''\n    )\n\n    class Meta:\n        model = Test\n        fields = ('password',)\n        \n    def __init__(self, *args, **kwargs):\n        self.test_id = kwargs.pop('test_id', None)\n        super(EntranceLoginForm, self).__init__(*args, **kwargs)\n        \n    def clean_password(self):\n        password = self.cleaned_data['password']\n        try:\n            test = Test.objects.get(id=self.test_id, password=password)\n        except ObjectDoesNotExist:\n            raise ValidationError(\"Invalid test or password\")\n        else:\n            if not test.is_active:\n                raise ValidationError(\"This test is not active\")\n        \n            if Block.objects.filter(test=test).count() <= 0:\n                raise ValidationError(\"This test has not been configured properly\")\n        \n        return password\n\nclass AtLeastOneFormSet(BaseInlineFormSet):\n    \n    def clean(self):\n        super(AtLeastOneFormSet, self).clean()\n        non_empty_forms = 0\n        for form in self:\n            if form.cleaned_data:\n                non_empty_forms += 1\n        if non_empty_forms - len(self.deleted_forms) < 1:\n            raise ValidationError(\"Please create at least one object\")\n        \nclass PageForm(FlatpageForm):\n    \n    class Meta:\n        model = FlatPage\n        #widgets = {\n        #    'content': CKEditorWidget()\n        #}\n"]],"start1":0,"start2":0,"length1":0,"length2":2951}]],"length":2951}
{"contributors":[],"silentsave":false,"ts":1380565338282,"patch":[[{"diffs":[[0,"Set    \n"],[-1,"#"],[0,"from cke"]],"start1":241,"start2":241,"length1":17,"length2":16},{"diffs":[[0,"        "],[-1,"#"],[0,"widgets "]],"start1":2877,"start2":2877,"length1":17,"length2":16},{"diffs":[[0,"        "],[-1,"#"],[0,"    'con"]],"start1":2897,"start2":2897,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"#"],[0,"}\n"]],"start1":2941,"start2":2941,"length1":7,"length2":6}]],"length":2947,"saved":false}
{"contributors":[],"silentsave":false,"ts":1381508190688,"patch":[[{"diffs":[[0,"l=False)"],[1,".distinct()"],[0,",\n      "]],"start1":896,"start2":896,"length1":16,"length2":27}]],"length":2958,"saved":false}
