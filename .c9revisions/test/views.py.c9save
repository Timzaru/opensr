{"ts":1380913698986,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"from django.core.urlresolvers import reverse\nfrom django.template import RequestContext\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.core import serializers\nfrom django.http import HttpResponse\nfrom django.conf import settings\nfrom itertools import chain\nfrom django.shortcuts import (render, redirect)\nfrom test.models import (Test, ExperimentalGroup, Participant, Block, Category, ImageStimulus, TextStimulus, Trial)\nfrom test.forms import (IndexLoginForm, EntranceLoginForm)\nfrom test.decorators import (has_participant_id, has_completed_test, has_not_completed_test, has_no_participant_id, has_test_id, has_no_test_id)\n\n@has_no_participant_id\n@has_no_test_id\ndef index(request):\n    login_form = IndexLoginForm()    \n    if request.POST:\n        login_form = IndexLoginForm(request.POST)\n        if login_form.is_valid():\n            request.session['test'] = Test.objects.get(id=request.POST['test'])\n            return redirect(reverse('informed_consent'))\n        \n    object_context = {'login_form': login_form}\n    return render(request, 'test/index.html', object_context)\n\n@has_no_participant_id\n@has_no_test_id\ndef entrance(request, test_id):\n    login_form = EntranceLoginForm()    \n    if request.POST:\n        login_form = EntranceLoginForm(request.POST, test_id=test_id)\n        if login_form.is_valid():\n            request.session['test'] = Test.objects.get(id=test_id)\n            return redirect(reverse('informed_consent'))\n        \n    object_context = {\n        'login_form': login_form,\n        'test_id': test_id\n    }\n    return render(request, 'test/entrance.html', object_context)   \n\n@has_test_id\ndef informed_consent(request):\n    object_context = {\n        'flatpage': request.session['test'].informed_consent_page,\n        'next_page_url': '/introduction/'\n    }     \n    context_instance = RequestContext(request)\n    context_instance.autoescape=False    \n    return render(request, 'flatpages/default.html', object_context, context_instance=context_instance)\n\n@has_test_id\ndef introduction(request):\n    page = request.session['test'].introduction_page\n    if page:\n        object_context = {\n            'flatpage': page,\n            'next_page_url': '/experimental-group/'\n        } \n        context_instance = RequestContext(request)\n        context_instance.autoescape=False\n        return render(request, 'flatpages/default.html', object_context, context_instance=context_instance)\n    else:\n        return redirect(reverse('experimental-group'))\n\n@has_test_id\ndef experimental_group(request):\n    test = request.session['test']\n    groups = ExperimentalGroup.objects.filter(test=test).order_by('id')\n    \n    if not 'participant' in request.session:\n        def get_next_group():\n            try:\n                latest_group_id = Participant.objects.latest('id').experimental_group.id\n                for i in range(len(groups)):\n                    if groups[i].id == latest_group_id:\n                       return groups[0] if (i == (len(groups) - 1)) else groups[i + 1]\n            except ObjectDoesNotExist:\n                return groups[0]\n\n        group = get_next_group()\n    \n        participant = Participant.objects.create_participant(group, test)\n        request.session['participant'] = participant\n    else:\n        group = request.session['participant'].experimental_group\n                               \n    if not group.page:\n        return redirect(reverse('test'))\n    \n    object_context = {\n        'flatpage': group.page,\n        'next_page_url': '/test/'\n    }\n    context_instance = RequestContext(request)\n    context_instance.autoescape=False    \n    return render(request, 'flatpages/default.html', object_context, context_instance=context_instance)\n\n@has_participant_id\n@has_not_completed_test\ndef test(request):    \n    def get_blocks(test):\n        blocks = Block.objects.filter(test=test)    \n        distinct_trials = Trial.objects.filter(participant=request.session['participant']).values('block').distinct()\n        for distinct_trial in distinct_trials:\n            block = blocks.get(block_name=distinct_trial['block'])\n            block_trials = Trial.objects.filter(participant=request.session['participant'], block=distinct_trial['block'])\n            if block.number_of_stimuli == block_trials.count():\n                blocks = blocks.exclude(id=block.id)\n            else:\n                block_trials.delete()\n        return blocks\n    \n    test = request.session['test']    \n    blocks = get_blocks(test) \n                \n    category_ids = []\n    for block in blocks:\n        category_ids.append(block.primary_left_category_id)\n        category_ids.append(block.primary_right_category_id)\n        if not block.primary_left_category_id is None:\n            category_ids.append(block.secondary_left_category_id)\n        if not block.secondary_right_category_id is None:\n            category_ids.append(block.secondary_right_category_id)\n          \n    categories = Category.objects.filter(id__in=category_ids)   \n    image_stimuli = ImageStimulus.objects.filter(category_id__in=category_ids)\n    text_stimuli = TextStimulus.objects.filter(category_id__in=category_ids)\n    stimuli = list(chain(image_stimuli, text_stimuli))\n    \n    context_instance = RequestContext(request)\n    context_instance.autoescape=False    \n    object_context = {\n       'test': serializers.serialize('json', [test]),\n        'blocks': serializers.serialize('json', blocks),\n        'categories': serializers.serialize('json', categories),\n        'stimuli': serializers.serialize('json', stimuli),\n        'left_key_bind': test.left_key_bind.upper(),\n        'right_key_bind': test.right_key_bind.upper(),\n        'next_page_url': '/confirmation/' if not test.survey_url else test.survey_url,\n        'media_url': settings.MEDIA_URL,\n    }  \n    return render(request, 'test/test.html', object_context, context_instance=context_instance)\n\n@has_participant_id\n@has_completed_test\ndef confirmation(request):\n    object_context = {\n        'flatpage': request.session['test'].confirmation_page\n    }     \n    context_instance = RequestContext(request)\n    context_instance.autoescape=False    \n    return render(request, 'flatpages/default.html', object_context, context_instance=context_instance)\n\n@has_participant_id\ndef record_trial(request):\n    Trial.objects.create_result(\n        request.session['test'], \n        request.session['participant'].experimental_group,\n        request.GET['block'], \n        request.GET['practice'] == 'true', \n        request.GET['primary_left_category'], \n        request.GET['secondary_left_category'], \n        request.GET['primary_right_category'],\n        request.GET['secondary_right_category'], \n        request.GET['stimulus'], \n        request.GET['latency'], \n        request.GET['correct'] == 'true', \n        request.session['participant']\n    )\n    return HttpResponse('OK')\n\n@has_participant_id\ndef record_test_status(request):\n    request.session['participant'].has_completed_test = (request.GET['test_status'] == 'true')\n    request.session['participant'].save()\n    return HttpResponse('OK')\n\n@has_test_id\ndef exit(request):\n    if 'participant' in request.session:\n        del request.session['participant']\n        \n    if 'test' in request.session:\n        del request.session['test']\n        \n    object_context = {\n        'login_form': IndexLoginForm(),\n        'alert': 'You have successfully exited the test'\n    }\n    return render(request, 'test/index.html', object_context)\n\ndef error(request):\n    return render(request, 'test/error.html', {})"]],"start1":0,"start2":0,"length1":0,"length2":7587}]],"length":7587}
